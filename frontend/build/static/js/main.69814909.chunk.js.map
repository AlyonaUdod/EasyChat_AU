{"version":3,"sources":["Chat/Chat.jsx","App.js","serviceWorker.js","index.js"],"names":["window","socket","location","origin","path","Chat","state","author","input","messages","online","AllM","handlerChange","e","_this","setState","target","value","sendMessage","message","time","moment","format","content","prev","concat","Object","toConsumableArray","emit","_this2","this","axios","get","then","data","catch","err","console","log","on","_this3","react_default","a","createElement","className","Container","fluid","MessageHeader","Segment","clearing","Header","as","floated","style","marginBottom","Subheader","Comment","Group","map","el","key","Avatar","Content","Author","Metadata","Text","Input","name","label","Button","icon","labelPosition","placeholder","onChange","widths","color","onClick","Component","App","src_Chat_Chat","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.69814909.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Container, MessageHeader, Segment, Comment, Input, Button, Header} from 'semantic-ui-react'\r\nimport moment from 'moment'\r\nimport socket from 'socket.io-client'\r\nimport axios from 'axios'\r\n\r\nwindow.socket = socket(window.location.origin, {\r\n    path: \"/chat/\"\r\n});\r\n\r\n\r\nclass Chat extends Component {\r\n\r\n    state = {\r\n        author: 'Kitty',\r\n        input: '',\r\n        messages: [],\r\n        online: 1,\r\n        AllM: [],\r\n    }\r\n    handlerChange = (e) => {\r\n        this.setState({\r\n            input: e.target.value\r\n        })\r\n    }\r\n\r\n    sendMessage = () => {\r\n        let message = {\r\n            time: moment().format('LTS'),\r\n            content: this.state.input,\r\n            author: this.state.author\r\n        } \r\n\r\n        this.setState(prev => ({\r\n            messages: [...prev.messages, message],\r\n            input: ''\r\n        }))\r\n\r\n        window.socket.emit(\"message\", message);\r\n    }\r\n    \r\n\r\n    // getFirstMessages = () => {\r\n    //     axios.get('http://localhost:3003/')\r\n    //         .then( data => this.setState({messages: data.data}))\r\n    //         .catch( err => console.log(err))\r\n    // }\r\n\r\n    componentDidMount(){\r\n\r\n        axios.get('http://localhost:3003/')\r\n            .then( data => this.setState({messages: data.data}))\r\n            .catch( err => console.log(err))\r\n\r\n        window.socket.on(\"change-online\", (online) => {\r\n            console.log(online)\r\n                this.setState({\r\n                    online: online\r\n                })\r\n            })\r\n\r\n        window.socket.on(\"new-message\", (message) => {\r\n            this.setState(prev =>({\r\n                messages: [...prev.messages, message],\r\n            }))\r\n        });\r\n        \r\n        // window.socket.on(\"somebody-typing\", (is) => {\r\n        //     this.setState({\r\n        //         typing: is\r\n        //     })\r\n        // })\r\n    }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className='container'>\r\n        <Container fluid>\r\n\r\n        <MessageHeader/>\r\n           <Segment>\r\n\r\n           <Segment clearing>\r\n                <Header \r\n                fluid='true'\r\n                as='h2'\r\n                floated='left'\r\n                style={{\r\n                    marginBottom: 0\r\n                }}>\r\n                <Header.Subheader>\r\n                    Users Online/ {this.state.online}\r\n                </Header.Subheader>\r\n                </Header>\r\n            </Segment>\r\n\r\n             <Comment.Group className='messages'>\r\n\r\n                {this.state.messages.map(el =>  \r\n                <Comment key={el.time+el.content}>\r\n                    <Comment.Avatar/>\r\n                    <Comment.Content>\r\n                        <Comment.Author as='a'>\r\n                          {this.state.author}\r\n                        </Comment.Author>\r\n                        <Comment.Metadata>\r\n                           {el.time}\r\n                        </Comment.Metadata>\r\n\r\n                     <Comment.Text>{el.content}</Comment.Text>\r\n                    </Comment.Content>\r\n                </Comment>\r\n                    )}\r\n\r\n             </Comment.Group>\r\n           </Segment>\r\n\r\n\r\n           <Segment className='message__form'>\r\n                <Input\r\n                    fluid\r\n                    name='message'\r\n                    style={{\r\n                        marginBottom: '.7rem'\r\n                    }}\r\n                    label={<Button icon='add'/>}\r\n                    labelPosition='left'\r\n                    placeholder='Write your message'\r\n                    value={this.state.input}\r\n                    onChange={this.handlerChange}\r\n                   />\r\n                <Button.Group icon widths='2'>\r\n                    <Button color='orange' content='Add Reply' labelPosition='left' icon='edit' onClick={this.sendMessage} />\r\n                    {/* <Button color='teal' content='Upload media' labelPosition='right' icon='cloud upload' onClick={this.toggleModal}/> */}\r\n                </Button.Group>\r\n            </Segment>\r\n\r\n\r\n\r\n        </Container>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Chat\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Chat from './Chat/Chat'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Chat/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}